@page "/arbitrage/cash-and-carry"
@using FinancialRiskEngine.Client.Components.Display
@using FinancialRiskEngine.Client.Components.Tables
@using FinancialRiskEngine.Engine.Classes.Financial
@using FinancialRiskEngine.Engine.ArbitrageFinders

<div style="margin-left: 3em; margin-top: 4em">
    <MudStack Spacing="4">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard Elevation="3">
                    <CardTitle Title="Inputs" />
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="SpotPrice" Label="Spot Price" Variant="Variant.Outlined" Style="margin-bottom: 1em" Min="0.01" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="InterestRate" Label="Interest Rate" Variant="Variant.Outlined" Style="margin-bottom: 1em" Min="0.01" Max="0.50" />
                            </MudItem>
                        </MudGrid>
                        
                        <h3>These are the future contracts:</h3>
                        <FutureContractsTable Futures="@Futures" />
                        <MudGrid>
                            <MudItem>
                                <MudGrid Style="margin-bottom:1em">
                                    <MudItem xs="12" sm="6">
                                        <MudDatePicker DateChanged="@UpdateContractDate" Label="Date" Variant="Variant.Outlined" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudNumericField @bind-Value="_newFutureContract.Price" Label="Price" Variant="Variant.Outlined" />
                                    </MudItem>
                                </MudGrid>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddFutureContract" Style="margin: 1em">Add Future Contract</MudButton>
                            </MudItem>
                        </MudGrid>
                        <p>Other assumptions:</p>
                        <MudAlert Severity="Severity.Info">No cash-flows from the asset (no dividends, no cost-of-carry, etc.)</MudAlert>
                        <MudAlert Severity="Severity.Info">Interest rate used in financing the operation is continously compounded (although we can allow for yearly compounding too)</MudAlert>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <CardTitle Title="Outputs" />
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@FindArbitrageOpportunities" Style="margin: 1em">Find arbitrage opportunities</MudButton>
                        <h4>Arbitrage</h4>
                        @if (ArbitrageOpportunities.Count > 0)
                        {
                            <ul>
                                @foreach (var opportunity in ArbitrageOpportunities)
                                {
                                    <li>@opportunity</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No arbitrage opportunities found or no calculation made.</p>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudStack>
</div>


<div style="max-width: 50vw; margin-left: 3em; margin-top: 4em">
    <MudStack Spacing="4">



    </MudStack>
</div>

@code {
    private List<FutureContract> Futures = new List<FutureContract>()
    {
        new FutureContract()
        {
            Maturity = DateTime.Today.AddYears(1),
            Price = 1020,
            ContractSize = 1
        },
        new FutureContract()
        {
            Maturity = DateTime.Today.AddYears(2),
            Price = 1045,
            ContractSize = 1
        }
    };
    private double SpotPrice = 1000;
    private double InterestRate = 0.02;     // Term structure is flat
    private FutureContract _newFutureContract = new FutureContract();
    private List<string> ArbitrageOpportunities = new List<string>();

    private void FindArbitrageOpportunities()
    {
        ArbitrageOpportunities.Clear();
        ArbitrageOpportunities = CashAndCarryFinder.FindCashAndCarryArbitrage(SpotPrice, Futures, InterestRate);
    }

    private async Task UpdateContractDate(DateTime? date)
    {
        _newFutureContract.Maturity = date == null ? DateTime.Today : (DateTime)date;
        await Task.CompletedTask;
    }

    private async Task AddFutureContract()
    {
        if (_newFutureContract.Price <= 0 || _newFutureContract.Maturity == null || _newFutureContract.Maturity < DateTime.Today)
        {
            // Show an error message or handle invalid input
            return;
        }
        Futures.Add(_newFutureContract);
        await Task.CompletedTask;
    }
}

