@page "/interest-rates/interest-calculator"
@using FinancialRiskEngine.Client.Components.CalculationInfo
@using FinancialRiskEngine.Client.Components.Display
@using FinancialRiskEngine.Engine.Classes.Financial


<InterestRateParametersEditor @ref="_editor" Parameters="@Parameters" ParametersChanged="OnParametersChanged" />

<div style="max-width: 50vw; margin-left: 3em; margin-top: 4em">
    <MudStack Spacing="4">
        <MudCard Elevation="3">
            <MudCardHeader>
                <CardTitle Title="Inputs" />
                @* <MudText Typo="Typo.h6">Interest Rate Parameters</MudText> *@
                <MudSpacer />
                <MudButton Variant="Variant.Filled"
                            StartIcon="@Icons.Material.Filled.Edit"
                            OnClick="@(() => _editor?.ToggleEditor())">
                    Edit
                </MudButton>
            </MudCardHeader>
            <MudCardContent>
                @if (Parameters != null)
                {
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText><strong>Amount:</strong> @Parameters.Amount</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText><strong>Interest Rate:</strong> @Parameters.InterestRate</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText><strong>Years:</strong> @Parameters.Years</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText><strong>Compounding:</strong> @Parameters.CompoundingFrequency</MudText>
                        </MudItem>
                    </MudGrid>
                }
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="3">
            <MudCardContent>
                @if (Result != null)
                {
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        Future Value: @Result
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Warning">
                        Please enter valid parameters to calculate the future value.
                    </MudText>
                }
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="3">
            <MudCardContent>
                <p>Example (not really the actual code or formulas)</p>
                <CalculationInfo>
                    <CalculationInfoFormulas>
                        <p>
                            \[
                            \sigma_t^2 = \omega + \alpha_1 \epsilon_{t-1}^2 + \beta_1 \sigma_{t-1}^2
                            \]
                        </p>
                    </CalculationInfoFormulas>
                    <CalculationInfoCode>
                        <div>
                            <pre>
                            <code class="language-csharp">
                                public class Solution {
                                    public IList&lt;string&gt; SummaryRanges(int[] nums) {
                                        var output = new List&lt;string&gt;();
                                        if (nums.Length == 0)
                                        {
                                            return output.ToArray();
                                        }
                                        int? firstNumber = null;
                                        for (int i = 0; i &lt; nums.Length; i++)
                                        {
                                            if (firstNumber == null)
                                            {
                                                firstNumber = nums[i];
                                            }

                                            // Check if next number is one more and is not last number
                                            if (!(i == (nums.Length - 1)) &amp;&amp; nums[i + 1] - 1 == nums[i])
                                            {
                                                continue;
                                            }

                                            if (firstNumber == nums[i])
                                            {
                                                output.Add(nums[i].ToString());
                                            }
                                            else
                                            {
                                                output.Add(firstNumber.ToString() + "->" + nums[i].ToString());
                                            }
                                            firstNumber = null;
                                        }
                                        return output.ToArray();
                                    }
                                }
                                </code>
                            </pre>
                        </div>
                    </CalculationInfoCode>
                </CalculationInfo>
            </MudCardContent>
        </MudCard>
    </MudStack>
</div>

@code {
    private InterestRateParametersEditor? _editor;
    private InterestRateParameters Parameters = new InterestRateParameters().SetSampleValues();

    private decimal? Result => Parameters.HasValidValues() ? Parameters.GetFutureValue() : null;

    private void OnParametersChanged(InterestRateParameters parameters)
    {
        Parameters = parameters;
        StateHasChanged();
    }
}
