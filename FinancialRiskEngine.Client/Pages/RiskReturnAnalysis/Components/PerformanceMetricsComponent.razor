@page "/risk-return-analysis/performance-measures"

@using FinancialRiskEngine.Client.Components.CalculationInfo
@using FinancialRiskEngine.Client.Components.Charts
@using FinancialRiskEngine.Client.Components.Tables
@using FinancialRiskEngine.Engine.Calculators
@using FinancialRiskEngine.Engine.Classes.Financial
@using FinancialRiskEngine.Engine.Simulators

<div style="display: inline-flex">
    <div style="width: 50vw; margin-left: 1.5em; margin-top: 1.5em">
        <MudStack Spacing="4">
            <MudCard Elevation="3">
                <MudCardContent>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_mean" Label="Mean Daily Return (%)" Variant="Variant.Outlined" Style="margin-bottom: 1em" Min="-0.005" Max="0.006" Step="0.005" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_std" Min="0.006" Max="0.016" Label="Dailiy Volatility" Variant="Variant.Outlined" Step=".005" Style="margin-bottom: 1em" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_rfr" Min="0.0000" Max="0.20" Label="Risk Free Rate (Yearly)" Variant="Variant.Outlined" Step=".005" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_nSimulations" Min="0" Max="1000" Label="Number of simulations" Variant="Variant.Outlined" Step="10" />
                    </MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SimulateReturns">Simulate Returns (Single normal returns)</MudButton>
                </MudCardContent>
            </MudCard>
            <MudCard>
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        <MudTabPanel Text="Time Chart">
                            @if (SimulatedPrices.Count() == 1)
                            {
                                @* We can add the risk free rate line which will help with the interpretation *@
                                <ReturnsLineChart Prices="@SimulatedPrices" />
                            } else
                            {
                                <MultipleReturnsLineChart ContainerId="test" ListPriceSimulations="@SimulatedPricesList" Height="40" Width="40" PerformanceMeasureResults="@_sharpeRatioList" />
                            }

                        </MudTabPanel>
                        <MudTabPanel Text="Table">
                            <ReturnsTable Prices="@SimulatedPrices" Loading="@_loading" />
                        </MudTabPanel>
                    </MudTabs>
                }
            </MudCard>
        </MudStack>
    </div>
    <div style="margin-left: 1em; margin-top: 1.5em">
        <MudStack Spacing="4">
            @* TODO : Add the daily and yearly returns and volatility to help the user with the formula *@
            @* TODO : Add and document the formulas using MathJax *@
            <MudCard>
                <div style="padding: 3em; text-align: center">
                    @if (_loading)
                    {
                        <MudText Color="Color.Primary">Running simulations...</MudText>
                    }
                    else
                    {
                        <MudText>Sharpe's Ratio</MudText>
                        @if (_sharpeRatio == null)
                        {
                            <MudText>Unable to compute</MudText>
                        }
                        else
                        {
                            <MudText>@_sharpeRatio?.ToString("F2")</MudText>
                            <PerformanceIndicator Score="(double)_sharpeRatio" Measure="PerformanceIndicator.PerformanceMeasure.Sharpe" />
                        }
                    }
                </div>
            </MudCard>
            <MudCard>
                <div style="padding: 3em; text-align: center">
                    @if (_loading)
                    {
                        <MudText Color="Color.Primary">Running simulations...</MudText>
                    }
                    else
                    {
                        <MudText>Sortino's Ratio</MudText>
                        @if (_sortinoRatio == null)
                        {
                            <MudText>Unable to compute</MudText>
                        }
                        else
                        {
                            <MudText>@_sortinoRatio?.ToString("F2")</MudText>
                            <PerformanceIndicator Score="(double)_sortinoRatio" Measure="PerformanceIndicator.PerformanceMeasure.Sortino" />
                        }
                    }
                </div>
            </MudCard>
        </MudStack>

    </div>
</div>

@code {
    private List<Price> SimulatedPrices => SimulatedPricesList.First();
    private List<List<Price>> SimulatedPricesList = new List<List<Price>>();
    private double _mean = 0.001;
    private double _std = 0.008;
    private double _rfr = 0.02;

    private int _nSimulations = 1;

    private double? _sharpeRatio => _sharpeRatioList.Count() == 0 ? null : _sharpeRatioList.Average();
    private double? _sortinoRatio => _sortinoRatioList.Count() == 0 ? null : _sortinoRatioList.Average();

    private List<double> _sharpeRatioList = new List<double>();
    private List<double> _sortinoRatioList = new List<double>();

    protected override async Task OnInitializedAsync()
    {
        await SimulateReturns();
    }

    private bool _loading = false;

    private async Task SimulateReturns()
    {
        Thread.Sleep(50);
        _loading = true;
        StateHasChanged();

        ClearVariables();

        var SimulatedPricesTask = Task.Run(() =>
            PriceSimulator.GetMultipleSimulatedPricesNormalDistributionOptimizedAsync(n: 1000, mean: _mean, std: _std, runs: _nSimulations)
        );
        SimulatedPricesList = await SimulatedPricesTask;
        SetPerformanceMeasures();

        _loading = false;
        StateHasChanged(); // Trigger final render
    }

    private void ClearVariables()
    {
        SimulatedPricesList.Clear();
        _sharpeRatioList.Clear();
        _sortinoRatioList.Clear();
    }

    private void SetPerformanceMeasures()
    {
        for (int i = 0; i < _nSimulations; i++)
        {
            var sharpeRatio = PerformanceMetricsCalculator.ComputeSharpeRatio(SimulatedPricesList[i], _rfr);
            _sharpeRatioList.Add(sharpeRatio);
            var sortinoRatio = PerformanceMetricsCalculator.ComputeSortinoRatio(SimulatedPricesList[i], _rfr);
            _sortinoRatioList.Add(sortinoRatio);
        }
    }
}
