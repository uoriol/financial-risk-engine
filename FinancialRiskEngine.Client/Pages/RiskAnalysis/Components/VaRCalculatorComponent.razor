@using FinancialRiskEngine.Client.Components.Charts
@using FinancialRiskEngine.Client.Components.Inputs
@using FinancialRiskEngine.Client.Components.Tables
@using FinancialRiskEngine.Engine.Calculators
@using FinancialRiskEngine.Engine.Classes.Financial
@using FinancialRiskEngine.Engine.Simulators
@page "/risk-analysis/var-calculator"

<PriceSimulationInputs @ref="@priceSimulationInputs" OnParametersChanged="@SimulateReturns" />
@if(Prices.Count() > 0)
{
    <ReturnsTable Prices="@Prices" />
    @* <ReturnsLineChart Prices="@Prices" /> *@
}


<MudCard>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@CalculateVaR">Calculate VaR</MudButton>
    @if (VaR != null)
    {
        <MudText Typo="Typo.h5" Color="Color.Primary">
            VaR: @VaR
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Warning">
            Please enter valid parameters to calculate the VaR.
        </MudText>
    }
</MudCard>

@code {
    public List<Price> Prices { get; set; } = new List<Price>();
    private PriceSimulationInputs priceSimulationInputs;
    private double? VaR { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        // Generate random prices
        Prices = await PriceSimulator.GetSimulatedPricesNormalDistributionOptimizedAsync(1000, 0.001, 0.008, 100);
    }

    private async Task SimulateReturns()
    {
        Prices = new List<Price>();
        StateHasChanged();
        // Simulate returns based on the inputs
        var simulatedPrices = await PriceSimulator.GetSimulatedPricesNormalDistributionOptimizedAsync(
            priceSimulationInputs._nSimulatedDays,
            priceSimulationInputs._mean,
            priceSimulationInputs._std,
            priceSimulationInputs._open);
        Prices = simulatedPrices;
    }

    private async Task CalculateVaR()
    {
        // For now at 99% confidence level and 1 day time horizon
        VaR = VaRCalculator.ComputeValueAtRisk(Prices, 0.99, 1); 
    }
}
