@page "/simulators/price-returns-simulator"
@using FinancialRiskEngine.Client.Components.Charts
@using FinancialRiskEngine.Client.Components.Tables
@using FinancialRiskEngine.Engine.Simulators
@using FinancialRiskEngine.Engine.Classes.Financial

<div style="display: inline-flex">
    <div style="max-width: 50vw; margin-left: 1.5em; margin-top: 1.5em">
        <MudStack Spacing="4">
            <MudCard Elevation="3">
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_open" Min="0.0001" Label="Starting Price" Variant="Variant.Outlined" Step=".4" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_nSimulatedDays" Min="1" Max="100000" Label="Simulated Days" Variant="Variant.Outlined" Step="100" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="_mean" Label="Mean Daily Return (%)" Variant="Variant.Outlined" Style="margin-bottom: 1em" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_std" Min="0.0000" Label="Dailiy Volatility" Variant="Variant.Outlined" Step=".4" />
                        </MudItem>
                        <MudItem xs="10" sm="10">
                        </MudItem>
                        <MudItem xs="2" sm="2">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SimulateReturns">Simulate Returns</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
            <MudCard>
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        <MudTabPanel Text="Time Chart">
                            <ReturnsLineChart Prices="@SimulatedPrices" />
                        </MudTabPanel>
                        <MudTabPanel Text="Table">
                            <ReturnsTable Prices="@SimulatedPrices" Loading="@_loading" />
                        </MudTabPanel>
                        <MudTabPanel Text="Distribution Histogram">
                            <ReturnsDistributionHistogram Prices="@SimulatedPrices" />
                        </MudTabPanel>
                    </MudTabs>
                }
            </MudCard>
        </MudStack>
    </div>
    <div style="margin-left: 1em; margin-top: 1.5em">
        <MudStack Spacing="4">
            <MudCard>
                @if (_loading)
                {
                    <MudText Color="Color.Primary">Running simulations...</MudText>
                }
                else
                {
                    <ReturnsTable Prices="@SimulatedPrices" Loading="@_loading" />
                }
            </MudCard>
            <MudCard>
                @if (_loading)
                {
                    <MudText Color="Color.Primary">Running simulations...</MudText>
                }
                else
                {
                    <ReturnsDistributionHistogram Prices="@SimulatedPrices" />
                }
            </MudCard>
        </MudStack>
        
    </div>
</div>



@code {
    private List<Price> SimulatedPrices = new List<Price>();

    private double _open = 100;
    private double _mean = 0.001;
    private double _std = 0.008;
    private int _nSimulatedDays = 1000;
    private int _nRuns = 1;

    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        await SimulateReturns();
    }


    private async Task SimulateReturns()
    {
        Thread.Sleep(50); // Simulate a delay for loading state
        _loading = true;
        StateHasChanged(); // Trigger spinner or loading state

        var SimulatedPricesTask = Task.Run(() =>
            PriceSimulator.GetSimulatedPricesNormalDistributionOptimizedAsync(_nSimulatedDays, _mean, _std, _open)
        );

        var _SimulatedPricesTask = Task.Run(() =>
            PriceSimulator.GetSimulatedPricesNormalDistributionAsync(_nSimulatedDays, _mean, _std, _open)
        );

        SimulatedPrices = await SimulatedPricesTask;
        var SimulatedPrices2 = await _SimulatedPricesTask;

        _loading = false;
        StateHasChanged(); // Trigger final render
    }

    private async Task SimulateReturns2()
    {
        _loading = true;
        StateHasChanged();
        SimulatedPrices = await PriceSimulator.GetSimulatedPricesNormalDistributionAsync(_nSimulatedDays, _mean, _std, _open);
        _loading = false;
        StateHasChanged();

    }
}
