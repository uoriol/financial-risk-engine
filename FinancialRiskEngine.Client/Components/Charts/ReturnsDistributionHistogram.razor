@using FinancialRiskEngine.Engine.Classes.Financial
@inject IJSRuntime _jsInterop

<div class="col-12">
    <svg id="returnshistorgram"></svg>
</div>

@code {
    [Parameter]
    public List<Price> Prices { get; set; } = new List<Price>();

    [Parameter]
    public double? VaR { get; set; } = null;

    private List<double> _lastReturns = new();
    private double? _lastVaR = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateHistogram();
            _lastReturns = Prices.Select(x => x.Return).ToList();
            _lastVaR = VaR;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var currentReturns = Prices.Select(x => x.Return).ToList();
        bool returnsChanged = !_lastReturns.SequenceEqual(currentReturns);
        bool varChanged = _lastVaR != VaR;

        if (returnsChanged || varChanged)
        {
            await UpdateHistogram();
            _lastReturns = currentReturns;
            _lastVaR = VaR;
        }
    }

    public async Task UpdateHistogram()
    {
        await _jsInterop.InvokeVoidAsync("CreateHistogram", Prices.Select(x => x.Return).ToList(), "#returnshistorgram");
        if (VaR != null)
        {
            await _jsInterop.InvokeVoidAsync("AddVaRLine", "#returnshistorgram", VaR);
        }
    }
}